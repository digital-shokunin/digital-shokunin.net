<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Digital Shokunin</title><link href="http://digital-shokunin.net/" rel="alternate"></link><link href="http://digital-shokunin.net/feeds/all.atom.xml" rel="self"></link><id>http://digital-shokunin.net/</id><updated>2013-11-07T21:00:00-05:00</updated><entry><title>Reverse XOR'ing WebSphere Passwords</title><link href="http://digital-shokunin.net/websphere-xor-password.html" rel="alternate"></link><updated>2013-11-07T21:00:00-05:00</updated><author><name>David Mitchell</name></author><id>tag:digital-shokunin.net,2013-11-07:websphere-xor-password.html</id><summary type="html">&lt;p&gt;Some of the lessons I've learned from the &lt;a href="http://www.matasano.com/articles/crypto-challenges/"&gt;Matasano Crypto Challenge&lt;/a&gt;
has already had unexpected practical application for a common issue I 
encounter at work. Sometimes, people forget things, don't document things
especially in dev environments (hopefully not so much in production), one
of those things is passwords, passwords for database accounts, or for an
account that has some authorization the application needs. If a dev forgets
a password or can't find where it was documented, it's many times better
to just recover the password, rather then reset the password, especially
if the account is used by the application in local dev environments, etc.&lt;/p&gt;
&lt;p&gt;There are also sites that will reverse it for you, but why use a website 
when you can use a jython/python script. You can also  use the 
com.ibm.ws.security.util.PasswordDecoder method from within wsadmin to 
accomplish the same task as well. The one thing I haven't found is a 
Python script example on how to do this, so I decided to write my own 
simple script module that can decode (or encode) a password that can 
execute in jython (wsadmin) or plain Python. &lt;/p&gt;
&lt;p&gt;WebSphere stores most of the account information used by applications to 
connect to resources as authentication aliases. The authentication aliases 
are stored by WebSphere in the security.xml file for the cell in a network
deployment setup, of which the password is stored as an xor string.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;xor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;Lz4sLCgwLTs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, xor'ing passwords is not a very strong hash method for securing a 
password, as we'll soon explore, wspecially when xor'ing 
against a single character, which is what WebSphere does. This exacerbates
the need for good file system security on your websphere installation so 
that not just anyone can view your security.xml file. I could have 
tried xor'ing against various single characters to crack it in seconds, 
but there are already multiple other articles and posts out there on how 
to reverse xor the WebSphere, checking a couple of results from Google
you learn passwords are xor'ed against the underscore '_' character. &lt;/p&gt;
&lt;p&gt;First, the password hash is base64 encoded, so you have to decode it using
the binascii module (base64 library wasn't supported in wsadmin). Well, 
first is actually removing the {xor} prefix, but that's a minor detail.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt; &lt;span class="n"&gt;xor_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{xor}Lz4sLCgwLTs=&amp;quot;&lt;/span&gt;
 &lt;span class="n"&gt;xor_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xor_str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;xor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binascii&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a2b_base64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xor_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you create another string of underscores that is the same length as
the string resulting from the base64 decode.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt; &lt;span class="n"&gt;value2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you have two strings of equal length, one being underscores, now you 
just xorsum the two strings. The easiest way I've found is to just do it 
character by character rather then whole strings at a time.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt; &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now your password variable will contain the decoded password. Very 
simple.&lt;/p&gt;
&lt;p&gt;If you need something like this or want to see how I pull it all together,
I've got the full code anyone can use/implement, also with the encode 
functions in a &lt;a href="https://github.com/digital-shokunin/was_xor_decode"&gt;Github repo&lt;/a&gt;.&lt;/p&gt;</summary><category term="ibm"></category><category term="websphere"></category><category term="crypto"></category><category term="python"></category><category term="security"></category></entry><entry><title>Python for fun and profit</title><link href="http://digital-shokunin.net/python-fun-profit.html" rel="alternate"></link><updated>2013-10-12T21:00:00-04:00</updated><author><name>David Mitchell</name></author><id>tag:digital-shokunin.net,2013-10-12:python-fun-profit.html</id><summary type="html">&lt;p&gt;I have been honing my Python skills on a couple of projects recently. One
is the famous (or infamous) &lt;a href="http://www.pythonchallenge.com"&gt;Python Challenge&lt;/a&gt;
which has been interesting, but its not where I have spent the bulk of my
time. The other is some work related scripting in jython for Websphere 
automating some tasks for developers (pausing and resuming activation
specifications) in their test environment.&lt;/p&gt;
&lt;p&gt;But was has challenged me the most and captured the majority of my attention
is the &lt;a href="http://www.matasano.com/articles/crypto-challenges/"&gt;Matasano Crypto Challenge&lt;/a&gt;.
The nature of the challenge is they send you several tasks to complete 
successfully using the language of choice (in my case obviously, Python)
and in the process you learn about encryption. More to the point you learn
several basic weaknesses and common attacks used to crack encryption.&lt;/p&gt;
&lt;p&gt;I've gotten through 5 of the 8 batch of exercises they've sent me, currently
a bit stuck on number 6. It's a situation where I can kind of see what I
am doing wrong but not sure how to fix it. Unfortunately, I am unable to 
talk about or share the exercises with anyone, otherwise, it would not be 
be much of a challenge.&lt;/p&gt;
&lt;p&gt;I've also been going to the &lt;a href="http://www.pyptug.org"&gt;PyPTUG&lt;/a&gt; project nights
and I've been getting a lot out of those. I like the open format where 
people just share what they're working on or whatever they want to discuss.&lt;/p&gt;</summary><category term="python"></category><category term="crypto"></category></entry><entry><title>Metasploitation</title><link href="http://digital-shokunin.net/metasploitation.html" rel="alternate"></link><updated>2013-08-05T21:00:00-04:00</updated><author><name>David Mitchell</name></author><id>tag:digital-shokunin.net,2013-08-05:metasploitation.html</id><summary type="html">&lt;p&gt;So I've been using some of my spare time to experiment with and learn 
how to use Metasploit. I've been familiar with Metasploit for a while 
now, so this isn't really about learning something new so much as it is 
finally getting familiar with a tool that I've messed with only a little
in the past. Part of this is because I have no programming projects to 
occupy myself with since I have a real problem finding an interesting 
problem or project that I can code a solution for. Metasploit is also 
something I feel I should know how to use, if I ever want to run a quick
pentest against my own network, etc.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.metasploit.com"&gt;Metasploit&lt;/a&gt;, to be really simple is a "free" 
suite of penetration testing software.  It gives you a framework full of 
tools needed to scan networks, find their vulnerabilites, exploit them, 
and keep track of what you find. Running it requires all the skill of 
your average skiddie, which is good, because I'm mainly a sysadmin who
dabbles in infosec. &lt;/p&gt;
&lt;p&gt;The best way to learn any piece of software is to use it, but with 
something like Metasploit, you kind of need a target network, and you 
don't necessarily want to exploit your own production boxes, and even if
you did, assuming you've "hardened" and patched your services reasonably
well, it will be difficult to get very far with Metasploit knowing very
little about it. Thankfully, the community has provided a solution 
aptly named Metasploitable. &lt;a href="http://sourceforge.net/projects/metasploitable/"&gt;Metasploitable&lt;/a&gt; 
is a virtual machine image that runs in &lt;a href="http://www.virtualbox.org"&gt;VirtualBox&lt;/a&gt; 
(also "free") which contains a preconfigured Ubuntu Server that is 
intentionally unpatched or has "vulnerablities included". This allows 
you to practice against the target host through multiple vectors to try 
and gain full root access or compromise it some other way.&lt;/p&gt;
&lt;p&gt;So you you have a machine to target, now you just need Metasploit, you
of course could just download and install it, but I have found the best
way is to run &lt;a href="http://www.backtrack-linux.org"&gt;BackTrack Linux&lt;/a&gt; which 
comes with Metasploit and other tools preinstalled. I personally also 
run this in a virtual box instance, although you could simply run it 
natively off the liveCD or install it on a computer you have available.&lt;/p&gt;
&lt;p&gt;You have Metasploit, and you have a machine to practice using it 
against, now you just need a guide to use it all. Well, MetaSploit is 
pretty well documented by itself, but what was recommended to me is the 
&lt;a href="http://www.offensive-security.com/metasploit-unleashed/"&gt;Metasploit Unleashed&lt;/a&gt; 
course provided by Offensive Security that guides you through the 
various features of MetaSploit and later exercises you can use. The only 
caveat I've found is that many of the Windows examples obviously don't 
work well against Metasploitable, being Linux, although I suppose you 
could spin up an unpatched Windows XP or 2000 instance to mess with as 
well.&lt;/p&gt;
&lt;p&gt;I'm only partially through a few chapters of the Metasploit Unleashed 
course and have already learned quite a bit. Maybe later I'll share some
of what I've learned that I've found very useful here.&lt;/p&gt;</summary><category term="metasploit"></category><category term="security"></category></entry><entry><title>Message engines &amp; Service Integration Buses</title><link href="http://digital-shokunin.net/message-engine-bus.html" rel="alternate"></link><updated>2013-05-30T21:00:00-04:00</updated><author><name>David Mitchell</name></author><id>tag:digital-shokunin.net,2013-05-30:message-engine-bus.html</id><summary type="html">&lt;p&gt;One of the components that I deal with in my work with WebSphere that seems nebulous to some conceptually, is the service integration bus and it's corresponding message engine. Especially when you're first beginning to learn about WebSphere and JMS. This concept is not unique to WebSphere and similar implementations can be found in JBoss, but my experience with it rests mostly with WebSphere.&lt;/p&gt;
&lt;p&gt;A service integration bus lets applications exchange messages between each other within a cell. Think of it like a transport provider for messages within WebSphere that allows for asynchronous communication between applications. One application can place a message on a bus, and all other applications connected to the bus can retrieve the message and perform some work on them, or there is some mediation done before hand. You can have one application handle a web request and put a message on a bus where a cluster of applications that can handle the request will see it and one of them will grab the message and handle the work needed for the request. This is very useful for spreading the workload among a cluster of application servers while ensuring high availability.&lt;/p&gt;
&lt;p&gt;The bus has what are called destinations, which are effectively queues or topics similar in concept to what you would find with WebSphere MQ. Destinations are simply where the messages are put and retrieved. There is usually a message producer and consumer. One being the application that creates and places the message on the destination, and the consumer the application that receives the message.&lt;/p&gt;
&lt;p&gt;The component that performs all the work is the message engine, it can be an application server or cluster of servers that are members of the bus. They also host the destinations on the bus. There are &lt;a href="http://www.ibm.com/developerworks/websphere/library/techarticles/0704_chilanti/0704_chilanti.html#N100E3"&gt;ways of configuring the message engine across the members so that there is redundancy and fail-over&lt;/a&gt;. Each of which has advantages and disadvantages which should be weighed for what best suits your environment.&lt;/p&gt;
&lt;p&gt;The message engine itself needs somewhere to store the messages, simply keeping them in memory can mean losing messages. The two main options available are either a file store, meaning they are just written directly to disk, or a JDBC data source meaning the messages are placed and stored in database, like DB2 or Oracle. &lt;/p&gt;
&lt;p&gt;Usually the messages are stored on the bus indefinitely until they are retrieved by a consumer. In fact, one problem I've encountered is old messages that no longer have an active transaction associated with them remaining on the destination until they are cleared, this can cause problems with when the message engine is restarted since it processes all the messages on the queue before getting to ones that are associated with a transaction. If there are a lot of messages, this can take a very long time. You need to usually set an expiration for the message either in the &lt;a href="http://pic.dhe.ibm.com/infocenter/wasinfo/v7r0/index.jsp?topic=%2Fcom.ibm.websphere.nd.doc%2Finfo%2Fae%2Fae%2Frwsf_prjms_timetolive.html"&gt;JMS properties in the application code&lt;/a&gt; that produces the message or setting a property value on the &lt;a href="http://pic.dhe.ibm.com/infocenter/wasinfo/v7r0/index.jsp?topic=%2Fcom.ibm.websphere.nd.multiplatform.doc%2Finfo%2Fae%2Fae%2FSIBJMSQueue_DetailForm.html"&gt;destination queue itself&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;It should also be noted that those with a WebSphere MQ infrastructure in place may &lt;a href="http://www.ibm.com/developerworks/websphere/library/techarticles/1109_wallis/1109_wallis.html"&gt;choose to use MQ instead of an SIBus&lt;/a&gt; to exchange messages between applications. One can even &lt;a href="http://pic.dhe.ibm.com/infocenter/wasinfo/v7r0/index.jsp?topic=%2Fcom.ibm.websphere.soafep.multiplatform.doc%2Finfo%2Fae%2Fae%2Fcjc0051_.html"&gt;exchange messages between MQ and the SI Bus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While the concepts may seem daunting and configuring an SI Bus can be complex, its simple to just remember that its ultimate purpose is just to allow one or more applications to exchange messages using the JMS API.&lt;/p&gt;</summary><category term="ibm"></category><category term="websphere"></category></entry><entry><title>Fierce</title><link href="http://digital-shokunin.net/fierce.html" rel="alternate"></link><updated>2013-04-11T21:00:00-04:00</updated><author><name>David Mitchell</name></author><id>tag:digital-shokunin.net,2013-04-11:fierce.html</id><summary type="html">&lt;p&gt;I've been learning a little bit about security and penetration testing in my spare time. I have some friends who are professionals in the industry and I have an interest in it myself so when they mention a tool I like to take a look at what it does and learn a little bit about it.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ha.ckers.org/fierce/"&gt;Fierce&lt;/a&gt; is a domain scanning tool, what that means is it scans an organization's domains for listed hosts. For example, a target company may have several non-contigious IP ranges or have branch sites or locations that aren't using the same public IP's as say their website or main office. By scanning their DNS records you might discover some hosts on IP's that weren't in the same scope as say their website or primary data center, and thus may be hosts that aren't as vigilantly maintained. An organization's IT department might have hosts or backdoors to access a branch location they setup for themselves that they setup a domain name for (ex:branch32-jumphost.company.com) that isn't apparent by scanning a single IP address range.&lt;/p&gt;
&lt;p&gt;By scanning the company's DNS records, you can easily discover the lesser known vectors of attack in theory. Also, it's not as likely to trigger an intrusion detection system like one would if you port scanned an entire company's IP range looking for available hosts.&lt;/p&gt;
&lt;p&gt;Fierce is a really simple tool to use, anyone who has used a tool like 
nmap will find it straight forward. Installation is simply done by checking out their subversion repository.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;svn&lt;/span&gt; &lt;span class="n"&gt;co&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//svn.assembla.com/svn/fierce/fierce2/trunk/ fierce2/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's written in Perl, so you should already have that installed on whatever you'll be running it on. From there it's as simple as going into the newly created fierce2 directory and running a scan against your target.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;fierce&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dns&lt;/span&gt; &lt;span class="n"&gt;company&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are more &lt;a href="https://trac.assembla.com/fierce/wiki"&gt;examples on the wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now, that I've said all that, while querying someone's DNS records is in and of itself harmless, exercise some common sense. Don't be scanning networks or domains you don't yourself own or have permission to be messing with. At the very least, don't do it exposed from your home IP as you can get yourself in trouble, reported to your ISP, or even in trouble with local law enforcement even if you're just being curious and not going any further then seeing what's out there, it still might be enough to get you in hot water depending on your local laws and ISP's policies. &lt;/p&gt;
&lt;p&gt;However, you might want to know just how much your own domain records give away, and if you administrate your own DNS, you might want to adjust some settings on your DNS servers to prevent too much from being exposed to would-be attackers. After all, why give away more information to the outside world then you absolutely have to. For those cases, this tool is worth having available even if you're not a dediated security professional yourself.&lt;/p&gt;</summary><category term="Security"></category><category term="Pen Testing"></category><category term="DNS"></category></entry><entry><title>CarolinaCon 9</title><link href="http://digital-shokunin.net/carolinacon-9.html" rel="alternate"></link><updated>2013-03-17T22:00:00-04:00</updated><author><name>David Mitchell</name></author><id>tag:digital-shokunin.net,2013-03-17:carolinacon-9.html</id><summary type="html">&lt;p&gt;&lt;a href="http://carolinacon.org/"&gt;CarolinaCon 9&lt;/a&gt; was this weekend in Raleigh, NC which I attended Saturday. I was also there as a representative of &lt;a href="http://www.lockfale.com"&gt;FALE&lt;/a&gt;
to help host their lock pick village. &lt;/p&gt;
&lt;p&gt;There were several &lt;a href="http://carolinacon.org/#SpeakerTopics"&gt;talks&lt;/a&gt; given by some of the FALE members, one titled "Terminal Cornucopia" by &lt;a href="https://twitter.com/evanbooth"&gt;treefort&lt;/a&gt; was on how ineffective TSA security theater is at preventing weapons from making it onto an airplane. There was a demonstration of a club called "Murica" made with items purchased in the terminal behind TSA security checkpoints consisting of a copy of the Declaration of Independence, with a pointy metal souvenir model of the Washington monument protruding from it. I actually missed this one, but saw and held the hefty "Murica" and can honestly say a violent individual could do some serious damage with it. &lt;/p&gt;
&lt;p&gt;&lt;img width="600" alt="Murica!" src="/static/pictures/murica.jpg"&gt;&lt;/p&gt;
&lt;p&gt;There were other talks I were able to attend that took place on Saturday. One, given by &lt;a href="https://github.com/jarrick"&gt;Jarrick&lt;/a&gt; on iPhone data reconnaissance by accessing the sqllite database of iPhone data that iTunes creates when it backs up an iOS device. This makes for an easy way to access text messages, or other data on the phone stored by various applications. He even wrote a local web based utility for browsing the data that he made a failed attempt to demo, but the code is out there on the &lt;a href="https://github.com/lockfale"&gt;FALE github&lt;/a&gt;. Also on the &lt;a href="https://github.com/lockfale"&gt;FALE github&lt;/a&gt; is the code for &lt;a href="https://twitter.com/melvin2001"&gt;melvin2001&lt;/a&gt;'s AV avoidance and payload delivery that he gave a talk on later that afternoon. His demo consisted of pre-recorded video, so we saw it work. He even wrote a loop. &lt;a href="https://twitter.com/j0emccray"&gt;Joe McCray&lt;/a&gt; also gave a talk with a quick tutorial on how to write assembly, I only attended part of it since the rest of my time was divided assisting with the lockpick village FALE was operating across the hall. We taught people the basics of lockpicking, took $20 donations for their choice of a lockpick kit or t-shirt, as well as showed people how to shim handcuffs.&lt;/p&gt;
&lt;p&gt;The videos of the talks should be up on the &lt;a href="http://carolinacon.org"&gt;CarolinaCon site&lt;/a&gt; in a week or two if you want to view the talks.&lt;/p&gt;</summary><category term="security"></category><category term="hacking"></category><category term="lockpicking"></category></entry><entry><title>Java EE and Android</title><link href="http://digital-shokunin.net/javaee-n-Android.html" rel="alternate"></link><updated>2013-02-23T21:00:00-05:00</updated><author><name>David Mitchell</name></author><id>tag:digital-shokunin.net,2013-02-23:javaee-n-Android.html</id><summary type="html">&lt;p&gt;In the last year I've been picking up more and more Java, I did this for two reasons.&lt;/p&gt;
&lt;p&gt;The most personal one is that I wanted to learn how to write Android programs. First, because I own an Android phone, second, the mobile platform is a platform where a small individual developer can write useful apps and there obviously is demand and a future for such skills on the 
market as well.&lt;/p&gt;
&lt;p&gt;I bought Android books, but later discovered that you don't need books to learn Android, and by the time you dive into them Google is releasing a new version of the SDK that makes the book nearly obsolete. There are much better resources online that cover
the basics of writing Android programs and stay up to date. &lt;a href="https://developer.android.com/training/index.html"&gt;Google's Android Developer Training&lt;/a&gt; is an excellent place to start. &lt;/p&gt;
&lt;p&gt;The second reason I learned Java is more professional in nature. My daily work involves maintaining JavaEE applications and it behooves me to understand something about the way they run. It's much easier to grasp things on a more tangible level and troubleshoot problems if you know something about JavaEE programming how applications work internally, how they access resources, and what logic goes into making the applications do what it is they do. I bought some books for this, mainly JavaEE changes very little or is not as fast paced as it is made for enterprise environments. So the information in the books don't deprecate nearly as quickly. I also to a self-paced online course that required some programming exercises. Most of this was specific to IBM Websphere, but very little of it is anything more then an IBM implementation of a pre-existing JavaEE standard. This has resulted in the opportunity to do some coding work on an actual application. Something I'm already seeing the fruits of. &lt;/p&gt;
&lt;p&gt;Who knows one or both of these two may hold future careers for me if I ever decide to get out of the system administration game. I couldn't tell you which, and while there are other languages out there that hold my interest and are in many ways more fun, truth is Java is very marketable in the business environment. I see more of both JavaEE and mobile development opportunites in my own workplace as well as in the IT market at large.&lt;/p&gt;</summary><category term="Java"></category><category term="Android"></category></entry><entry><title>PyDev and wsadmin unite</title><link href="http://digital-shokunin.net/pydev-wsadmin-unite.html" rel="alternate"></link><updated>2013-02-23T21:00:00-05:00</updated><author><name>David Mitchell</name></author><id>tag:digital-shokunin.net,2013-02-23:pydev-wsadmin-unite.html</id><summary type="html">&lt;p&gt;Those of us that use WebSphere Application Server in our environments as our J2EE application server have a very
powerful tool to administrate or automate tasks from the command line, wsadmin. wsadmin is a command line utility that
allows you to issue commands in a single server or network deployment (multiple servers in a single administrative domain
or "cell"). If you are reading this you probably know all about it and its support for Python, or Jython environment as
a language to issue commands and run scripts to handle a variety of tasks.&lt;/p&gt;
&lt;p&gt;Most of us who write scripts for it, write our scripts in a text editor and then manually execute them or test small 
portions of our script in a separate command line window. This can be tedious at best, those of us that use an IDE
have the issue that the standard Python interpreter doesn't respect the Websphere modules and it shows errors for 
portions of code that are perfectly valid inside wsadmin.&lt;/p&gt;
&lt;p&gt;So when I found &lt;a href="http://www.ibm.com/developerworks/websphere/techjournal/1209_vansickel/1209_vansickel.html"&gt;instructions&lt;/a&gt;
on how to integrate the &lt;a href="http://pydev.org/"&gt;PyDev IDE add-on/module for Eclipse&lt;/a&gt; and 
wsadmin, I was a little more then excited. This can save me a lot of time writing new code. &lt;/p&gt;
&lt;p&gt;The &lt;a href="http://www.ibm.com/developerworks/websphere/techjournal/1209_vansickel/1209_vansickel.html"&gt;steps&lt;/a&gt; are fairly 
straight forward, install Eclipse and PyDev if you haven't already done so, and download &lt;a href="http://www.jython.org/"&gt;Jython&lt;/a&gt;.
You then configure PyDev to use the Jython jar as your Python interpreter. They provide a script that customizes the 
Jython environment to use wsadmin. However, I found that in one of the fields, you provide a directory for it to put the 
pre-defined Admin modules, you need to escape any slashes between directory names or the path gets mucked up.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nx"&gt;wsadmin.bat&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;sh&lt;/span&gt; &lt;span class="na"&gt;-host&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DM_HOST&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="na"&gt;-port&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SOAP_PORT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="na"&gt;-profile&lt;/span&gt; &lt;span class="nx"&gt;WSAdminProfile.py&lt;/span&gt;
&lt;span class="na"&gt;-f&lt;/span&gt; &lt;span class="nx"&gt;GeneratePyPredefs.py&lt;/span&gt; 
&lt;span class="na"&gt;-pypredefsDir&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;C:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;workspaces&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;adminobj&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Otherwise, the setup is pretty straight forward, if you want to try it yourself, the full instructions along with the 
necessary scripts are &lt;a href="http://www.ibm.com/developerworks/websphere/techjournal/1209_vansickel/1209_vansickel.html"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="python"></category><category term="pydev"></category><category term="websphere"></category></entry><entry><title>My first post using Pelican</title><link href="http://digital-shokunin.net/first-post-pelican.html" rel="alternate"></link><updated>2013-02-10T21:00:00-05:00</updated><author><name>David Mitchell</name></author><id>tag:digital-shokunin.net,2013-02-10:first-post-pelican.html</id><summary type="html">&lt;p&gt;This is my first post using Pelican as my new blogging platform. I had considered using &lt;a href="http://www.octopress.org"&gt;OctoPress&lt;/a&gt; but encountered too much trouble getting the ruby stack to work properly without dependency problems, even following directions or tutorials. So I looked for a Python alternative and found &lt;a href="http://docs.notmyidea.org/alexis/pelican/"&gt;Pelican&lt;/a&gt;. I found it was much simpler to get running just following the directions. Plus, I know Python, so I'm obviously more comfortable with it then Ruby. I've never dealt with Ruby directly until OctoPress and my prior experience only included reading about it.&lt;/p&gt;
&lt;p&gt;I am using AWS to host this, and an AWS EC2 host or S3 bucket is securely configured to only allow login through ssh with a private key file. This makes it difficult to simply publish over ssh with the default authentication. Some changes need to be made to the site Makefile to allow for this.&lt;/p&gt;
&lt;p&gt;On line 18:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;SSH_PRI_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;path to private key file&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Further down on line 60:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;ssh_upload&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;publish&lt;/span&gt;
&lt;span class="nf"&gt;scp -i $(SSH_PRI_KEY) -P $(SSH_PORT) -r $(OUTPUTDIR)/* $(SSH_USER)@$(SSH_HOST)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;$(SSH_TARGET_DIR)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From there a simple &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;ssh_upload&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will push it out to my AWS host.&lt;/p&gt;
&lt;p&gt;For some reason, this type of blogging platform seems more elegant then a CMS like WordPress, it gives you the control you get from statically coding your site's html/css/js, to say nothing of the lack of overhead required to serve static content. However, it still gives you the dynamically generated links and ease of management one gets from a CMS. That and it's very programmer friendly.&lt;/p&gt;
&lt;p&gt;I need some time to go through all the &lt;a href="https://github.com/getpelican/pelican-themes"&gt;themes&lt;/a&gt; for Pelican but so far I like the simple look of the default template. I may either tweak it or try out some of the other themes.&lt;/p&gt;
&lt;p&gt;I also have some other things to work on or learn about for this site, like getting used to using markdown, adding some more content, and testing the limitations of Pelican.&lt;/p&gt;</summary><category term="python"></category><category term="pelican"></category></entry></feed>